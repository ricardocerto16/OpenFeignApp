{
	"info": {
		"_postman_id": "d046f81a-a09d-4767-a8e0-edfbadaa8b52",
		"name": "OpenFeign",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "26334870"
	},
	"item": [
		{
			"name": "ConsemeFeign",
			"item": [
				{
					"name": "Find All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"  pm.expect(jsonData.content[0].name).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.content[0].id).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.page).to.be.an(\"object\");\r",
									"  pm.expect(jsonData.content).to.be.an(\"array\");\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable\", function () {\r",
									"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"$content.name\"));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://localhost:8081/feign/users"
					},
					"response": []
				},
				{
					"name": "Find User By iD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable\", function () {\r",
									"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"$content.name\"));\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"  pm.expect(jsonData.content.name).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.content.id).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.content).to.be.an(\"object\");\r",
									"  pm.expect(jsonData).to.have.all.keys('code', 'message', 'page', 'content');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"    \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://localhost:8081/feign/users/1"
					},
					"response": []
				}
			]
		},
		{
			"name": "PersonFeign",
			"item": [
				{
					"name": "Find all Persons",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"array\");\r",
									"  pm.expect(jsonData[0].name).to.be.a(\"string\");\r",
									"  pm.expect(jsonData[0].id).to.be.a(\"number\");\r",
									"  pm.expect(jsonData[0].country).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable\", function () {\r",
									"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"$content.name\"));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://localhost:8080/api/person"
					},
					"response": []
				},
				{
					"name": "Find Person By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"   pm.expect(jsonData).to.be.an(\"object\");\r",
									"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.country).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"    \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://localhost:8080/api/person/1"
					},
					"response": []
				},
				{
					"name": "Delete Person By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 900ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "http://localhost:8080/api/person/5"
					},
					"response": []
				},
				{
					"name": "Save Person",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"\r",
									"    \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"person 4\",\r\n  \"age\": 77,\r\n  \"country\": \"ing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/api/person"
					},
					"response": []
				},
				{
					"name": "Update Person By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"    \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"me\",\r\n  \"age\": 23,\r\n  \"country\": \"pt\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/api/person/1"
					},
					"response": []
				},
				{
					"name": "Error 400 Save Person",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unsuccessful POST request\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable\", function () {\r",
									"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"$status\"));\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"  pm.expect(jsonData.status).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									"    \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"abc\": \"aces v1 postman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/api/person"
					},
					"response": []
				},
				{
					"name": "Error 404 Find Person By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.notFound;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"  pm.expect(jsonData.code).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "http://localhost:8080/api/person/2"
					},
					"response": []
				},
				{
					"name": "Error 404 Delete Person By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "http://localhost:8080/api/person/1555"
					},
					"response": []
				},
				{
					"name": "Error 400 Update By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 700ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable\", function () {\r",
									"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"$status\"));\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"  pm.expect(jsonData.status).to.be.a(\"number\");\r",
									"  pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									"    \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"c\": \"me\",\r\n  \"age\": 23,\r\n  \"country\": \"pt\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/api/person/2"
					},
					"response": []
				},
				{
					"name": "Error 404 Update By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be valid and have a body\", function () {\r",
									"     pm.response.to.be.notFound;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable\", function () {\r",
									"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"$content.name\"));\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"  pm.expect(jsonData.code).to.be.a(\"string\");\r",
									"  pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									"    \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"me\",\r\n  \"age\": 23,\r\n  \"country\": \"pt\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:8080/api/person/20000"
					},
					"response": []
				}
			]
		}
	]
}